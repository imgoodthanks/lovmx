use Magic
require Logger

@cake)README.cake

  # Chapter 1: ILvMx 
 ## Orbital Magic for Cloud Apps.
### A programmable Code + Data + Item Server

https://lovmx.com

ILvMx &rarr; Internet Love and #virtual Magic #exchange
is an open source server for creating functionally minded 
cloud apps with global code + data + item storage, or 
what we call Orbital Magic for Cloud Apps.


tl;dr upload and visually create extremely fast web apps 

# Welcome to the LovMx

use Magic

# A simple example
# - create a data/bot
# - code magic on README.magic
# - that we read and flow into data, with the :cake type
# - then Pipe it to create a page
# - then we compile/compute the data
# - then we put it online in nubspace at `readme`

code(fn data ->
  "README.magic"
  |> read
  |> into data, Kind.cake
  |> magic
  |> page "readme.html"
end)
|> take "See `README.magic` for more info."
|> x
|> orbit "readme"


Galaxies, Bots, Beams, Items, and more, oh boy.

## Fast Five

1) [x] Open Source - Everything from the app, to the server, to the org is open source.
2) [x] Global Namespace + Code + Data - An open source non-profit Galactic Multiverse of code + data.
3) [x] Functional Reactive Programming - Completely Async Beam, Event, and Loop based execution.
4) [x] Persistent Data Structures - Fully Reversable State Machine w/ Rollback and Jump support.
5) [x] Divinely Fast - Diskbased Static Object Graph because web servers love files.

## welcome to #nubspace

#server
http://www.lovmx.com

> Logger.debug "Type LovMx.help to get started!"

LovMx is an Orbital Magic server and Web Theme Park (with optional Story Attraction!).


## Mission

Reboot the web of tomorrow with modern design, development, and codified moral and 
ethical principles so tomorrow's web doesn't suck as much as today's internet does. Let's
build it together in a fun Adventurama style open source galactic multiverse, with Clouds and 
Castles, Bots, Items, Beams, and other fun stuff. We call it Nubspace so nobody takes it too
serious, and we code it with powerful languages like Elixir, JavaScript, and Markdown style
programming and plain text and common sense languages too.

[#about](/about)

# Chapter 2: #[lovmx](//lovmx.com)

```
# playing with a web theme park
$ git clone https://github.com/lolnub/lovmx
$ cd lovmx
$ vagrant up
$ mix test
$ iex -S mix
```

  # ILvMx
 ## Internet Love and #virtual Magic #exchange
### Orbital Magic for Cloud Apps.

LovMx is a nonprofit global namespace of code + data + blob storage.

ILvMx takes place in many of the great holograms of Nubspace,
which we've mapped out here:


## Objects    (tree of life)
########################################################          
## app     (api/endpoints)
- Cake        // compile text/bot
- Galaxy      // static/dynamic
- Holo        // %{path: [things]}
  
## data       
- Bot         // code + data
- Item        // binary files
- Holo      // user/agent/auth

## vmx        (dispatch/vmx)
- Beam        // packets/events/actions
- Machine     // bot.keycode -> <machine/pid>
- Warp        // nubspace/objects
              
## warp       (adapt/emit)
- Data        // ecto/db/postgres
- Drive       // static/disk
- Web         // https/network


## API/Beams  (primary dimensions)
########################################################
- app         // three main objects
- data        // experience/reality
- vmx         // code/data/consciousness
- warp        // adapters/switches


## Data/Datas
########################################################
# - meta  // packet to get/list/meta
# - data  // packet to get/once/fastest/static
# - code  // packet to sub/code on
# - ping  // packet to sub/code/ping on
# - push  // packet to put/once
# - boot  // packet to put/loop/wait/mult/etc.
# - stop  // packet to kill/stop/forget/etc.
  
## Subscribe / Reactive Flows
########################################################
Warps adapt/read/write/switch to the Galaxy.
|> Boot objects interact inside Galaxys.
|> Galaxys pub/sub to Data/Datas.
|> Data/Datas proxy to Machines for exe. 
|> Machines emit to Warps.
|> Warps adapt/read/write/switch to the Galaxy.


## Publish / Proactive Flows
########################################################
Item.new
|> Bot.boot
|> Bot.cake
|> Bot.code
|> Flow.x
|> Bot.mix
|> Data.page
|> Data.json
|> Galaxy.subscribe


## Spiral Out.


 # Chapter 3: Getting Started.
## Programming your Orbital Magic server.

LovMx is an Orbital Magic server written in Elixir. The goal
is to provide a nonprofit global namespace of code + data + 
blob storage for open source developers.

The general layout of the framework looks like this:

## Objects    (tree of life)
########################################################
 
## app     (api/endpoints)
- Cake        // compile text/bot
- Galaxy      // static/dynamic
- Holo        // %{path: [things]}
  
## data       
- Bot         // code + data
- Item        // binary files
- Holo      // user/agent/auth

## vmx        (dispatch/vmx)
- Beam        // packets/events/actions
- Machine     // bot.keycode -> <machine/pid>
- Warp        // nubspace/objects
              
## warp       (adapt/emit)
- Data        // ecto/db/postgres
- Drive       // static/disk
- Web         // https/network

Where each level of the framework/hologram flows from a
high level `#app` API downward through the `#data` APIs
and mutates inside the `#vmx` (or private LovMx API) and
finally stops or loops back toward the `#warp` APIs.

Your APP will do these things:

- create a `lib/drive/<assets>` directory
- put static html/js/css assets into that directory
- create an `lib/drive/auto.cake` text file
- start on the console lovmx and visit using your web browser
- define your galaxy + write your Cake apps by creating multiple `lib/drive/<module>.cake` files as needed
- upload assets as needed
- self host your app w/ an elixir runtime
- upload your `drive` to lovmx.com for web-based magic
- network your `drive` w/ lolnub.app for true orbital magic


 # Chapter 4: Actually Getting Started.
## Actually Programming your Orbital Magic server.

Remembering the Tree of Life aboce, each dimension of the
framework/hologram flows from a higher level `#app` API 
downward through the `#data` APIs, mutating inside the 
`#vmx` (or private LovMx API) and finally looping back 
toward the `#warp` APIs.


Let's play:

```
$ mix new lovevmx
$ cd lovevmx

# add {:lovmx, git: "../lovmx"} to `mix.exs` `defp deps` section or:
# defp deps do
#   [{:lovmx, git: "../lovmx"}]
# end

$ mix deps.update --all
$ mix test
# 1 tests, 0 failures

# add `:lovmx` to `mix.exs` `def application` `applications:` section or:
# def application do
#   [applications: [:logger, :lovmx]]
# end

# add postgres/ecto config to `config/config.exs`
# config :lovmx, Warp.Pipe.Repo,
#   database: "lovmx",
#   username: "lovmx",
#   password: "lovmx",
#   hostname: "localhost"

$ mix test
# 1 tests, 0 failures
```

Creating a new Cake app.

# #
# # @cake)example
# #
# # An example Cake doc, written on an iPad,
# # in front of a beautiful lake, under the mountains,
# # with some basic (aka static) example text here.
# #
# # # Add the standard lovmx header.
# # @kit)html/header
# #
# #
# # # splice contents of nubspace `blob` (as text)
# # @warp)blob
# # ```
# # #warp!bot/121313-123131-1213313-121323/data
# #
# # //lolnub.com/blob/123.jpg
# # //lolnub.com/blob/345.jpg
# # ```
# # ```
# # #ping!bot/898989-898989-8908080-898790/data
# #
# # Does player want to upload a blob?
# # //lolnub.com/bot/898989/_/upload
# # ```
# #
# # # Import a custom footer (use absolute path) from `lib`
# # @kit)lib/drive/html/footer


# Chapter 3. Flowing Data
## Setup the README.

"README.magic"
|> read # read the file
|> magic # compile magicdown (markdown+) into data/bot
|> move "help" # move the bot into the `help` holospace
|> share # send it into holospace

# # LovMx + ILvMx.
# ## Welcome to Holospace.
# ### Orbital Magic for Cloud Apps.
#
# LovMx + ILvMx are free and open source nonprofit projects
# to host a global namespace of code/data/blobs.
#
# We are fun (silljays.com).
# We develop a cloud app server (this project).
# We develop a reference cloud app client (lolnub.app).
# We host a public data service (ilvmx.com).
# We give away the best Web Theme Park on the net. (lolnub.com)
#
# In a nutshell, we wanna build:
#
# *An Elixir-based Wolfram Language
# powered by a Twitter like network
# of Markdown-style documents
# for Clients connected to their own private VPN/VM
# running an Orbital Magic framework written in the
# sexiest language/runtime in the world, oh my dear love Erlang/Elixir,
# for the purpose of creating a grassroots network
# of Code + Data + Data storage aka Cake Apps
# written by commerce and community
# in a *meticulously* namespaced
# v2v storage-based network made
# completely open source and transparent.*
#
# Yeah that sounds right.
#
# Welcome to Holospace. Here, take this map...
#
# # Chapter 1. LovMx Tree of Life.
#
# Generally speaking, the Multiverse has three parts above,
# three below, and only really a few things in the middle we
# need to actually care about.
#
# # graph/higher
# - Data // both a particle (code/data) and a wave (roll/jump)
# - Flow // push/pull data from other `holospace` and `data`
# - Pipe // push one-way `data` to other parts of `holospace`
#
# # universe
# - Bot // easily create code + data components w/ a variety of data
# - Bridge // default HTTPS API server and NoFlo gateway
# - Player // user agents
#
# # vmx
# - Holo // global namespace of code + data storage
# - Machine // the virtual/physical code/server object
# - Tube // input/output API endpoints
#
# # hyperverse
# - Cake // All energy/matter/movement
# - Wizard // like a galactic nuclear janitor
#
#
# ## LovMx - Multiverse
# ```
# –––––––––––––––––––
# [universe]
# –––––––––––––––––––
# [vmx/holo]
# [vmx/machine]
# [vmx/tube]
# –––––––––––––––––––
# [server/multiverse]
# –––––––––––––––––––
# ```
# ## Virtual Machine eXchange
# #############################################################
#
# ```
# pattern |  in              out   | side effects
# ––––––––|––––––––––––––––––––––––|–––––––––––––––––––––––––
# data    |  Holo \       / Tube   | output |> html/json/etc
# ––––––––|––––––––––––––––––––––––|–––––––––––––––––––––––––
# actual  |        Machine         | files/sockets/https
# ––––––––|––––––––––––––––––––––––|–––––––––––––––––––––––––
# ```
#
# # Chapter 2. Data is All.
#
#  Data is nice for storing objects to disk,
#  but let's play with dynamic data too. Here
#  we will capture a flow of data or a data flow.
#
# ### Creating static objects (a Data-based Data flow) inside your head.
# data = Data.new "hi, this is your ai speaking.", Kind.auto
#
# ### Save it to the Db
# ### todo: write Db layer.
# data = Fridge.push data
#
# ### Push it to the Web.
# data = Tube.post data, "a/test/file"
#
#
# # Chapter 3. Flowing Data
#
# ```
# ## Setup the README.
# "README.magic"
# |> read # read the file
# |> magic # compile magicdown (markdown+) into data/bot
# |> move "help" # move the bot into the `help` holospace
# |> rate "fuzzy" # rate it as here but not critical
# |> orbit # send it into holospace
#
#
# # create a forward secrecy style page
# "/"
# |> pull "visitors"
# |> push "login"
# |> page "secrets/923/player/anonymous"
#
#
# new "core/Kick"
# |> data "Serverside4"
# |> pull "webserver/Server"
# |> pull "websocket/ListenConnections"
# |> page "core/Split"
#
#
#
# # Start a Reddit Bot
# "reddit"
# |> code(fn data ->
#   "https://reddit.com/r/news"
#   |> compile
#   |> code(fn post_from_reddit ->
#     Pipe.email "mike@silljays.com"
#   end)
#   |> x
# end
# |> orbit
#
#
# ## A counter bot
# "/"
# |> new(0)
# |> code(fn b -> pull b, (b.thing + 1) end)
# |> x "counter"
#
#
# "frameworks are cool"
# |> Data.new(Kind.auto)
# |> Flow.x("#create a data/flow that we can push/pull/animate with")
# |> Flow.r("#pipe a magic down (markdown+) like file at `data.pull.magic`")
# |> Flow.i(Kind.magic, Pipe.down Holo.read "README.magic")
# |> Flow.i(Kind.text, "checkout `Data#types` or just use custom data here to works"),
# |> Flow.i(Kind.html, Holo.compile)
# |> Flow.i(Kind.code, Data.code do
#   bot
#   |> Flow.r("#pipe a magic down (markdown+) like file at `data.pull.magic`")
#   |> Bot.pull(Kind.html, Pipe.down)
# end
# |> Flow.r("#text", "ok see how it works? create data, then change it..")
# |> Flow.r("#text", "now we need to Pipe the `data` flow somewhere in order to process it")
# |> Flow.i(Kind.code, Data.code)
# |> Flow.r("#text", "let's create a web page first")
# |> Flow.o(Web.post)
# |> Holo.x
#
# # That should be fairly clear.
#
# Now let's store and secret something in a private Castle.
#
# %Data{thing: TodoEncryption} = Castle.secret Data.new("hide stuff here.."), "secretpassword"
#
# # Using a Fridge.
#
# %Data{thing: TodoDb} = Fridge.pull "something", "password"
#
#
# # Writing files.
#
# %Data{} = Data.write Data.new, "something", "password"
#
# # Reading files.
#
# %Data{} = Data.read "<holospace>", "password"
#
# # Storing stuff publically from the Computer or server."
#
# Holo.push "about", Holo.read "README.magic"
#
# # Reading stuff from the public Computer or server drives."
#
# Holo.space "about"
#
# # Creating stuff in memory only.
#
# fn bot -> Holo.compile "https://reddit.com/r/#{bot.pull.uri}" end
# |> Data.code
# |> Holo.x
# |> Holo.x "whateverpath", "whateverpassword"
#
# # Reading all scenes from private memory.
# Holo.y
#
# # Exe *all* `data.code` for *all* lower holospace.
# Holo.z "whateverpath", "whateverpassword"
#
# # Any memories there or that exist?
# Holo.p "whateverpath"
#
# # *WHAT* is there exactly?
# Holo.d "whateverpath"
#
# # Create web pages and JSON stuff
#
# "hi"
# |> Data.new
# |> Flow.x("create hi pagte")
# |> Flow.i(Kind.code, Data.new)
# |> Flow.o(Web.post("hi.html")
# |> Data.new("hi.html", Kind.link)
#
# ```
#
# # Chapter 4. Maru Routers for advanced data flows.
#
# Working Code showing how to process routes in Holospace + add content.
# ########################################################################
#
# ```
# Holo.x "Chapter 4. // basically do all of the stuff above.."
#
# defmodule Readme.Web do
#
#   @moduledoc """
#    # Universe
#   ## Lovmx-level public data and data storage Container and Data Map.
#
#   Universe is a global map of: <holospace> -> [things] and are
#   superpowered by Maru-brand Routers which are awesome. Ask an
#   associate for more information.
#
#   https://maru.readme.io
#
#   Universe(s) are the *center* of `Holo.Holospace` where all
#   *UNIQUE* code/data/flows are *merged* into a single cohesive
#   Universe-wide hologram to be namespaced, stored, and experienced.
#
#   Universe(s) host all *PUBLIC* static/dynamic content, which
#   means a Universe is primarily responsible for creating and
#   maintaining the global object graph + all dynamic content
#   and updates that happen during normal usage.
#   """
#
#   # include Maru + other helpful modules
#   use OrbitalMagic
#
#   namespace do
#     route_param :holospace do
#       get do
#         holospace = Help.path params[:holospace]
#
#         data
#         Holo.fuzzy params[:holospace]
#       end
#       route_param :subpath do
#         get do
#           holospace = Help.path [params[:holospace], params[:subpath]]
#
#           spawn(params[:holospace], params[:subpath], Data.new holospace)
#
#           Holo.fuzzy params[:holospace]
#         end
#       end
#     end
#   end
#
#   # A stub into the Universe below...
#   get do
#     Holo.read "README.magic"
#   end
#
# end
# ```
